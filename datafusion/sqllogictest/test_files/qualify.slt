# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Basic table for QUALIFY tests, from Snowflake docs examples
statement ok
CREATE TABLE qt (i INT, p VARCHAR, o INT) AS VALUES
  (1, 'A', 1),
  (2, 'A', 2),
  (3, 'B', 1),
  (4, 'B', 2);

# QUALIFY with window predicate directly
query ITI
SELECT i, p, o
FROM qt
QUALIFY ROW_NUMBER() OVER (PARTITION BY p ORDER BY o) = 1
ORDER BY p, o;
----
1 A 1
3 B 1

# QUALIFY referencing window alias from SELECT list
query ITII
SELECT i, p, o, ROW_NUMBER() OVER (PARTITION BY p ORDER BY o) AS row_num
FROM qt
QUALIFY row_num = 1
ORDER BY p, o;
----
1 A 1 1
3 B 1 1

# QUALIFY on a window over an aggregate alias from SELECT
query TI
SELECT p, SUM(o) AS s
FROM qt
GROUP BY p
QUALIFY RANK() OVER (ORDER BY s DESC) = 1
ORDER BY p;
----
A 3
B 3

# QUALIFY requires at least one window function (error)
query error
SELECT i FROM qt QUALIFY i > 1;

# WHERE with scalar aggregate subquery + QUALIFY
statement ok
CREATE TABLE bulk_import_entities (
  id INT,
  _task_instance INT,
  _uploaded_at TIMESTAMP
) AS VALUES
  (1, 1, '2025-01-01 10:00:00'::timestamp),
  (1, 2, '2025-01-02 09:00:00'::timestamp),
  (1, 2, '2025-01-03 08:00:00'::timestamp),
  (2, 1, '2025-01-01 11:00:00'::timestamp),
  (2, 2, '2025-01-02 12:00:00'::timestamp),
  (3, 1, '2025-01-01 13:00:00'::timestamp);

query II
SELECT id, _task_instance
FROM bulk_import_entities
WHERE _task_instance = (
  SELECT MAX(_task_instance) FROM bulk_import_entities
)
QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY _uploaded_at) = 1
ORDER BY id;
----
1 2
2 2

# Constant filter + QUALIFY with multiple ORDER BY keys
statement ok
CREATE TABLE web_base_events_this_run (
  domain_sessionid VARCHAR,
  app_id VARCHAR,
  page_view_id VARCHAR,
  derived_tstamp TIMESTAMP,
  dvce_created_tstamp TIMESTAMP,
  event_id VARCHAR
) AS SELECT * FROM VALUES
  ('ds1', 'appA', NULL, '2025-01-01 10:00:00'::timestamp, '2025-01-01 10:05:00'::timestamp, 'e1'),
  ('ds1', 'appA', NULL, '2025-01-01 11:00:00'::timestamp, '2025-01-01 11:00:00'::timestamp, 'e2'),
  ('ds1', 'appA', 'pv', '2025-01-01 12:00:00'::timestamp, '2025-01-01 12:00:00'::timestamp, 'e3'),
  ('ds2', 'appB', NULL, '2025-01-01 09:00:00'::timestamp, '2025-01-01 09:10:00'::timestamp, 'e4'),
  ('ds2', 'appB', NULL, '2025-01-01 09:05:00'::timestamp, '2025-01-01 09:09:00'::timestamp, 'e5');

query TT
SELECT domain_sessionid, app_id
FROM web_base_events_this_run
WHERE page_view_id IS NULL
QUALIFY ROW_NUMBER() OVER (
  PARTITION BY domain_sessionid
  ORDER BY derived_tstamp, dvce_created_tstamp, event_id
) = 1
ORDER BY domain_sessionid;
----
ds1 appA
ds2 appB
